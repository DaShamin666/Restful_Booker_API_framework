name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short --alluredir=allure-results
    
    - name: Upload Allure results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-results-${{ matrix.python-version }}
        path: allure-results/
        retention-days: 7

  allure-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Merge Allure results
      run: |
        mkdir -p allure-results
        find artifacts -name "allure-results-*" -type d | while read dir; do
          if [ -d "$dir" ]; then
            cp -r "$dir"/* allure-results/ 2>/dev/null || true
          fi
        done
    
    - name: Generate Allure Report
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        allure_results: allure-results
        allure_history: allure-history
        keep_reports: 10
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: always() && github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: allure-history

  # CD - Continuous Deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [test, allure-report]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Deploy Application
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build Docker image
      run: |
        docker build -t test-framework:${{ github.sha }} .
        docker tag test-framework:${{ github.sha }} test-framework:latest
    
    - name: Run deployment tests
      run: |
        # –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–ª–æ—è
        pytest tests/test_ping.py -v --tb=short
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Docker image: test-framework:${{ github.sha }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        # kubectl apply -f k8s/staging/
        # –∏–ª–∏ docker-compose up -d
        # –∏–ª–∏ deploy to cloud provider
    
    - name: Run post-deployment tests
      run: |
        echo "üß™ Running post-deployment verification..."
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
        pytest tests/ -k "not test_update_booking and not test_delete_booking" -v
    
    - name: Notify deployment success
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "Environment: staging"
        echo "Version: ${{ github.sha }}"
        echo "Tests passed: ‚úÖ"
        echo "Allure report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

  # Production deployment (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–≥–æ–≤)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, allure-report]
    if: startsWith(github.ref, 'refs/tags/v')
    name: Deploy to Production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run full test suite
      run: |
        pytest tests/ -v --tb=short --alluredir=allure-results-prod
    
    - name: Build production Docker image
      run: |
        docker build -t test-framework:${{ github.ref_name }} .
        docker tag test-framework:${{ github.ref_name }} test-framework:production
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to PRODUCTION environment..."
        echo "Version: ${{ github.ref_name }}"
        echo "Docker image: test-framework:${{ github.ref_name }}"
        
        # –ó–¥–µ—Å—å —Ä–µ–∞–ª—å–Ω—ã–π production –¥–µ–ø–ª–æ–π
        # kubectl apply -f k8s/production/
        # –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–µ–ø–ª–æ—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## üöÄ Production Release ${{ github.ref_name }}
          
          ### ‚úÖ Deployed Successfully
          - All tests passed
          - Docker image built: `test-framework:${{ github.ref_name }}`
          - [View Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})
          
          ### üìä Test Results
          - Unit tests: ‚úÖ
          - Integration tests: ‚úÖ  
          - Deployment verification: ‚úÖ
        generate_release_notes: true
    
    - name: Notify production deployment
      run: |
        echo "üéâ PRODUCTION DEPLOYMENT COMPLETED!"
        echo "Version: ${{ github.ref_name }}"
        echo "Status: ‚úÖ Success"